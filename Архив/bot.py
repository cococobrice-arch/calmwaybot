import os
import asyncio
import logging
import sqlite3
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.exceptions import TelegramBadRequest

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ --------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è --------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
LINK = os.getenv("LINK_TO_MATERIAL")
VIDEO_NOTE_FILE_ID = os.getenv("VIDEO_NOTE_FILE_ID")
DB_PATH = os.getenv("DATABASE_PATH", "users.db")
CHANNEL_USERNAME = "@OcdAndAnxiety"

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --------------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# =========================================================
# 0. –ë–ê–ó–ê –î–ê–ù–ù–´–•
# =========================================================
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            source TEXT,
            step TEXT,
            subscribed INTEGER DEFAULT 0,
            last_action TEXT
        )
    """)
    conn.commit()
    conn.close()

def update_user(user_id: int, step: str = None, subscribed: int = None):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    exists = cursor.fetchone()

    if exists:
        if step:
            cursor.execute("UPDATE users SET step=?, last_action=? WHERE user_id=?",
                           (step, datetime.now(), user_id))
        if subscribed is not None:
            cursor.execute("UPDATE users SET subscribed=?, last_action=? WHERE user_id=?",
                           (subscribed, datetime.now(), user_id))
    else:
        cursor.execute("INSERT INTO users (user_id, source, step, subscribed, last_action) VALUES (?, ?, ?, ?, ?)",
                       (user_id, "unknown", step or "start", subscribed or 0, datetime.now()))
    conn.commit()
    conn.close()

init_db()

# =========================================================
# 1. –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
# =========================================================
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    update_user(message.from_user.id, step="start")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥", callback_data="get_material")]
    ])
    await message.answer(
        """–ï—Å–ª–∏ –í—ã –∑–∞—à–ª–∏ –≤ —ç—Ç–æ—Ç –±–æ—Ç, –∑–Ω–∞—á–∏—Ç, –í–∞—à–∏ —Ç—Ä–µ–≤–æ–≥–∏ —É–∂–µ —É—Å–ø–µ–ª–∏ —Å–∏–ª—å–Ω–æ –≤–º–µ—à–∞—Ç—å—Å—è –≤ –∂–∏–∑–Ω—å. 
–ß–∞—Å—Ç–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ üíì, –ø–æ—Ç–µ–º–Ω–µ–Ω–∏–µ –≤ –≥–ª–∞–∑–∞—Ö üåò, –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µüåÄ, –ø–æ—Ç –ø–æ —Å–ø–∏–Ω–µüò∞, —Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–∞—Å—Å—É–¥–æ–∫...
–ó–Ω–∞–∫–æ–º–æ? 

–í–µ—Ä–æ—è—Ç–Ω–æ, –í—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ç–∞–∫–∏–µ –Ω–∞–ø–ª—ã–≤—ã —Å—Ç—Ä–∞—Ö–∞ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è <b>–ø–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –∞—Ç–∞–∫–∞–º–∏</b>. 
–≠—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–º–µ—é—Ç —á—ë—Ç–∫—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å - –∏ –∫–æ–≥–¥–∞ –í—ã –ø–æ–π–º—ë—Ç–µ –µ—ë, –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å.

üñä –Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏, —á–µ–º –æ–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏ –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∏–º –ø–æ–¥—á–∏–Ω—è—Ç—å—Å—è.  
–°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ ‚Äî –∏ –¥–∞–π—Ç–µ –æ—Ç–ø–æ—Ä —Å—Ç—Ä–∞—Ö—É! üí°""",
        reply_markup=kb
    )

# =========================================================
# 2. –û–¢–ü–†–ê–í–ö–ê –ì–ê–ô–î–ê
# =========================================================
@router.callback_query(F.data == "get_material")
async def send_material(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    update_user(chat_id, step="got_material")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä—É–∂–æ–∫
    if VIDEO_NOTE_FILE_ID:
        try:
            await bot.send_chat_action(chat_id=chat_id, action="upload_video_note")
            await bot.send_video_note(chat_id=chat_id, video_note=VIDEO_NOTE_FILE_ID)
            await asyncio.sleep(2)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä—É–∂–æ–∫: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    if LINK and os.path.exists(LINK):
        file = FSInputFile(LINK, filename="–í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞.pdf")
        await bot.send_document(chat_id=chat_id, document=file, caption="–ü–µ—Ä–≤—ã–π —à–∞–≥ —Å–¥–µ–ª–∞–Ω üí™")
    elif LINK and LINK.startswith("http"):
        await bot.send_message(chat_id=chat_id, text=f"üìò –í–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: {LINK}")
    else:
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await asyncio.sleep(2)
    asyncio.create_task(send_followup_message(chat_id))
    await callback.answer()

# =========================================================
# 3. –°–û–û–ë–©–ï–ù–ò–ï –° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï–ú –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø
# =========================================================
async def send_followup_message(chat_id: int):
    await asyncio.sleep(20)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/OcdAndAnxiety")]
        ]
    )

    text = (
        "–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º —è –¥–µ–ª—é—Å—å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –Ω—é–∞–Ω—Å–∞–º–∏ –æ –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Ç—Ä–µ–≤–æ–≥–µ, "
        "–∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–≤–µ–∏–≤–∞—é –º–∏—Ñ—ã –æ <i>–Ω–µ</i>—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–∞—Ö –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö. "
        "–ù–∏–∫–∞–∫–æ–π –≤–æ–¥—ã, —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è! üíß‚ùå\n\n"
        '–ù–∞–ø—Ä–∏–º–µ—Ä, —è <a href="https://t.me/OcdAndAnxiety/16">–ø–∏—Å–∞–ª –ø–æ—Å—Ç</a> –æ —Ç–æ–º, –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–∞–Ω–∏—á–µ—Å–∫—É—é –∞—Ç–∞–∫—É.\n\n'
        "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏! üëáüèΩ"
    )

    try:
        await bot.send_message(
            chat_id,
            text,
            parse_mode="HTML",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
        update_user(chat_id, step="followup_sent")
        asyncio.create_task(schedule_next_message(chat_id))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# =========================================================
# 4. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò –ò –û–¢–ü–†–ê–í–ö–ê –°–õ–ï–î–£–Æ–©–ï–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
# =========================================================
async def schedule_next_message(chat_id: int):
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, chat_id)
        status = member.status
        is_subscribed = status in ["member", "administrator", "creator"]
        update_user(chat_id, subscribed=1 if is_subscribed else 0)

        delay = 30 if is_subscribed else 120  # 30 —Å–µ–∫—É–Ω–¥ / 2 –º–∏–Ω—É—Ç—ã
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}: –ø–æ–¥–ø–∏—Å–∞–Ω={is_subscribed}, —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫")

        await asyncio.sleep(delay)
        await send_chat_invite(chat_id)
    except TelegramBadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: {e}")

# =========================================================
# 5. –°–û–û–ë–©–ï–ù–ò–ï –û –ß–ê–¢–ï
# =========================================================
async def send_chat_invite(chat_id: int):
    text = (
        "–ö—Å—Ç–∞—Ç–∏, —É –º–µ–Ω—è –µ—Å—Ç—å —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã "
        "–∏ –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: https://t.me/Ocd_and_Anxiety_Chat"
    )
    try:
        await bot.send_message(chat_id, text)
        update_user(chat_id, step="chat_invite_sent")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")

# =========================================================
# 6. –ó–ê–ü–£–°–ö
# =========================================================
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
