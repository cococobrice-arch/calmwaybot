import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ (–¥–ª—è journalctl)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
LINK = os.getenv("LINK_TO_MATERIAL")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥", callback_data="get_material")]
    ])
    await message.answer(
        """–ï—Å–ª–∏ –í—ã –∑–∞—à–ª–∏ –≤ —ç—Ç–æ—Ç –±–æ—Ç, –∑–Ω–∞—á–∏—Ç, –í–∞—à–∏ —Ç—Ä–µ–≤–æ–≥–∏ —É–∂–µ —É—Å–ø–µ–ª–∏ —Å–∏–ª—å–Ω–æ –≤–º–µ—à–∞—Ç—å—Å—è –≤ –∂–∏–∑–Ω—å. 
–ß–∞—Å—Ç–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ üíì, –ø–æ—Ç–µ–º–Ω–µ–Ω–∏–µ –≤ –≥–ª–∞–∑–∞—Ö üåò, –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µüåÄ, –ø–æ—Ç –ø–æ —Å–ø–∏–Ω–µüò∞, —Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–∞—Å—Å—É–¥–æ–∫...
–ó–Ω–∞–∫–æ–º–æ? 

–í–µ—Ä–æ—è—Ç–Ω–æ, –í—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ç–∞–∫–∏–µ –Ω–∞–ø–ª—ã–≤—ã —Å—Ç—Ä–∞—Ö–∞ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –∞—Ç–∞–∫–∞–º–∏. 
–≠—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–º–µ—é—Ç —á—ë—Ç–∫—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å - –∏ –∫–æ–≥–¥–∞ –í—ã –ø–æ–π–º—ë—Ç–µ –µ—ë, –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å.

üìò –Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏, —á–µ–º –æ–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏ –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∏–º –ø–æ–¥—á–∏–Ω—è—Ç—å—Å—è.  
–°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ ‚Äî –∏ –¥–∞–π—Ç–µ –æ—Ç–ø–æ—Ä —Å—Ç—Ä–∞—Ö—É! üí°""",
        reply_markup=kb
    )


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"
@dp.callback_query(F.data == "get_material")
async def send_material(callback: CallbackQuery):
    if LINK and os.path.exists(LINK):
        file = FSInputFile(LINK, filename="–í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞.pdf")
        await callback.message.answer_document(file, caption="–ü–µ—Ä–≤—ã–π —à–∞–≥ —Å–¥–µ–ª–∞–Ω üí™")
        await callback.answer()
    else:
        await callback.message.answer("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()


# –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id –∫—Ä—É–∂–∫–∞
@dp.message(F.video_note)
async def get_video_note_id(message: Message):
    await message.answer(f"File ID –∫—Ä—É–∂–∫–∞:\n{message.video_note.file_id}")


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
