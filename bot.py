import os
import asyncio
import logging
import sqlite3
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    FSInputFile,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.exceptions import TelegramBadRequest

# -------------------- –õ–æ–≥–∏ --------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è --------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
LINK = os.getenv("LINK_TO_MATERIAL")
VIDEO_NOTE_FILE_ID = os.getenv("VIDEO_NOTE_FILE_ID")
DB_PATH = os.getenv("DATABASE_PATH", "users.db")
CHANNEL_USERNAME = "@OcdAndAnxiety"

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# -------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --------------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# =========================================================
# 0. –ë–ê–ó–ê –î–ê–ù–ù–´–•
# =========================================================
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            source TEXT,
            step TEXT,
            subscribed INTEGER DEFAULT 0,
            last_action TEXT
        )
    """)
    conn.commit()
    conn.close()

def update_user(user_id: int, step: str = None, subscribed: int = None):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    exists = cursor.fetchone()
    if exists:
        if step:
            cursor.execute("UPDATE users SET step=?, last_action=? WHERE user_id=?",
                           (step, datetime.now(), user_id))
        if subscribed is not None:
            cursor.execute("UPDATE users SET subscribed=?, last_action=? WHERE user_id=?",
                           (subscribed, datetime.now(), user_id))
    else:
        cursor.execute("INSERT INTO users (user_id, source, step, subscribed, last_action) VALUES (?, ?, ?, ?, ?)",
                       (user_id, "unknown", step or "start", subscribed or 0, datetime.now()))
    conn.commit()
    conn.close()

init_db()

# =========================================================
# 1. –ü–†–ò–í–ï–¢–°–¢–í–ò–ï
# =========================================================
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    update_user(message.from_user.id, step="start")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥", callback_data="get_material")]
    ])
    await message.answer(
        """–ï—Å–ª–∏ –í—ã –∑–∞—à–ª–∏ –≤ —ç—Ç–æ—Ç –±–æ—Ç, –∑–Ω–∞—á–∏—Ç, –í–∞—à–∏ —Ç—Ä–µ–≤–æ–≥–∏ —É–∂–µ —É—Å–ø–µ–ª–∏ —Å–∏–ª—å–Ω–æ –≤–º–µ—à–∞—Ç—å—Å—è –≤ –∂–∏–∑–Ω—å. 
–ß–∞—Å—Ç–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ üíì, –ø–æ—Ç–µ–º–Ω–µ–Ω–∏–µ –≤ –≥–ª–∞–∑–∞—Ö üåò, –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µüåÄ, –ø–æ—Ç –ø–æ —Å–ø–∏–Ω–µüò∞, —Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–∞—Å—Å—É–¥–æ–∫...
–ó–Ω–∞–∫–æ–º–æ? 

–í–µ—Ä–æ—è—Ç–Ω–æ, –í—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ç–∞–∫–∏–µ –Ω–∞–ø–ª—ã–≤—ã —Å—Ç—Ä–∞—Ö–∞ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è <b>–ø–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –∞—Ç–∞–∫–∞–º–∏</b>. 
–≠—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–º–µ—é—Ç —á—ë—Ç–∫—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å ‚Äî –∏ –∫–æ–≥–¥–∞ –í—ã –ø–æ–π–º—ë—Ç–µ –µ—ë, –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å.

üñä –Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏, —á–µ–º –æ–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏ –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∏–º –ø–æ–¥—á–∏–Ω—è—Ç—å—Å—è.  
–°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ ‚Äî –∏ –¥–∞–π—Ç–µ –æ—Ç–ø–æ—Ä —Å—Ç—Ä–∞—Ö—É! üí°""",
        reply_markup=kb,
        parse_mode="HTML"
    )

# =========================================================
# 2. –û–¢–ü–†–ê–í–ö–ê –ì–ê–ô–î–ê
# =========================================================
@router.callback_query(F.data == "get_material")
async def send_material(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    update_user(chat_id, step="got_material")

    # –∫—Ä—É–∂–æ–∫
    if VIDEO_NOTE_FILE_ID:
        try:
            await bot.send_chat_action(chat_id=chat_id, action="upload_video_note")
            await bot.send_video_note(chat_id=chat_id, video_note=VIDEO_NOTE_FILE_ID)
            await asyncio.sleep(2)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä—É–∂–æ–∫: {e}")

    # –º–∞—Ç–µ—Ä–∏–∞–ª
    if LINK and os.path.exists(LINK):
        file = FSInputFile(LINK, filename="–í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞.pdf")
        await bot.send_document(chat_id=chat_id, document=file, caption="–ü–µ—Ä–≤—ã–π —à–∞–≥ —Å–¥–µ–ª–∞–Ω üí™")
    elif LINK and LINK.startswith("http"):
        await bot.send_message(chat_id=chat_id, text=f"üìò –í–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: {LINK}")
    else:
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    asyncio.create_task(send_followup_message(chat_id))
    await callback.answer()

# =========================================================
# 3. –ü–û–î–ü–ò–°–ö–ê –ù–ê –ö–ê–ù–ê–õ
# =========================================================
async def send_followup_message(chat_id: int):
    await asyncio.sleep(10)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/OcdAndAnxiety")]
        ]
    )
    text = (
        "–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª, –≥–¥–µ —è –¥–µ–ª—é—Å—å –Ω—é–∞–Ω—Å–∞–º–∏ –æ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–∏ —Ç—Ä–µ–≤–æ–≥–∏ "
        "–∏ —Ä–∞–∑–≤–µ–∏–≤–∞—é –º–∏—Ñ—ã –æ <i>–Ω–µ</i>—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–∞—Ö. "
        "–ù–∏–∫–∞–∫–æ–π –≤–æ–¥—ã ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. üíß‚ùå\n\n"
        '–ù–∞–ø—Ä–∏–º–µ—Ä, —è <a href="https://t.me/OcdAndAnxiety/16">–ø–∏—Å–∞–ª –ø–æ—Å—Ç</a> –æ —Ç–æ–º, –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–∞–Ω–∏—á–µ—Å–∫—É—é –∞—Ç–∞–∫—É.\n\n'
        "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üëáüèΩ"
    )
    try:
        await bot.send_message(
            chat_id,
            text,
            parse_mode="HTML",
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
        update_user(chat_id, step="followup_sent")
        asyncio.create_task(schedule_next_message(chat_id))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ follow-up —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# =========================================================
# 4. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
# =========================================================
async def schedule_next_message(chat_id: int):
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, chat_id)
        is_subscribed = member.status in ["member", "administrator", "creator"]
        update_user(chat_id, subscribed=1 if is_subscribed else 0)
        await asyncio.sleep(10)
        asyncio.create_task(send_chat_invite(chat_id))
    except TelegramBadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: {e}")

# =========================================================
# 5. –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –í –ß–ê–¢
# =========================================================
async def send_chat_invite(chat_id: int):
    try:
        await bot.send_message(
            chat_id,
            "–ö—Å—Ç–∞—Ç–∏, —É –º–µ–Ω—è –µ—Å—Ç—å —á–∞—Ç, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Å—É–¥–∏—Ç—å –æ–ø—ã—Ç —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: "
            "https://t.me/Ocd_and_Anxiety_Chat"
        )
        update_user(chat_id, step="chat_invite_sent")
        asyncio.create_task(send_next_message(chat_id))
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")

# =========================================================
# 6. –í–û–†–û–ù–ö–ê
# =========================================================
SCENARIO_ORDER = [
    "start", "got_material", "followup_sent", "chat_invite_sent",
    "avoidance_offer", "avoidance_done", "case_story", "self_disclosure", "consultation_offer"
]
SCENARIO_FLOW = {
    "chat_invite_sent": "avoidance_offer",
    "avoidance_offer": "case_story",
    "case_story": "self_disclosure",
    "self_disclosure": "consultation_offer"
}

def get_user_step(user_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT step FROM users WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    conn.close()
    return row[0] if row else "start"

def update_user_step(user_id: int, step: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET step=?, last_action=? WHERE user_id=?", (step, datetime.now(), user_id))
    conn.commit()
    conn.close()

# =========================================================
# 7. –ü–ï–†–ï–•–û–î–´
# =========================================================
async def send_next_message(chat_id: int):
    current_step = get_user_step(chat_id)
    next_step = SCENARIO_FLOW.get(current_step)
    if next_step == "avoidance_offer":
        asyncio.create_task(send_avoidance_offer(chat_id))
    elif next_step == "case_story":
        asyncio.create_task(send_case_story(chat_id))
    elif next_step == "self_disclosure":
        asyncio.create_task(send_self_disclosure(chat_id))
    elif next_step == "consultation_offer":
        asyncio.create_task(send_consultation_offer(chat_id))

# =========================================================
# 8. –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–†–û–ô–¢–ò –¢–ï–°–¢
# =========================================================
async def send_avoidance_offer(chat_id: int):
    await asyncio.sleep(10)
    text = (
        "–ú–Ω–æ–≥–∏–µ –∑–∞–º–µ—á–∞—é—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –≥–∞–π–¥–∞ —Ç—Ä–µ–≤–æ–≥–∞ –Ω–µ–º–Ω–æ–≥–æ –æ—Å–ª–∞–±–µ–≤–∞–µ—Ç. "
        "–ù–æ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Å–∏–ª—å–Ω–æ –ø–∞–Ω–∏–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∂–∏–∑–Ω—å, –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å. "
        "–û–Ω –ø–æ–∫–∞–∂–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–æ –∏–∑–±–µ–≥–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–π, –≤—ã–∑—ã–≤–∞—é—â–∏—Ö —Å—Ç—Ä–∞—Ö.\n\n"
        "üß© –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data="avoidance_test")]]
    )
    await bot.send_message(chat_id, text, reply_markup=kb)
    update_user_step(chat_id, "avoidance_offer")

# =========================================================
# 9. –û–ë–†–ê–ë–û–¢–ö–ê –û–ü–†–û–°–ê (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
# =========================================================
@router.callback_query(F.data == "avoidance_test")
async def handle_avoidance_test(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    current_step = get_user_step(chat_id)
    current_index = SCENARIO_ORDER.index(current_step)
    test_index = SCENARIO_ORDER.index("avoidance_offer")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ä–∞–∑—É
    if test_index <= current_index:
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ üëç –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω. –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ–º–Ω–æ–≥–æ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º ‚Äî —ç—Ç–æ —à–∞–≥ –≤–ø–µ—Ä—ë–¥.")
    else:
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ üëç –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –í–∞—à—É —Ç—Ä–µ–≤–æ–≥—É.")

    # –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —à–∞–≥ –¥–æ –æ—Ç–≤–µ—Ç–∞ Telegram
    update_user_step(chat_id, "avoidance_done")

    # –ó–∞–≤–µ—Ä—à–∏—Ç—å callback, —á—Ç–æ–±—ã Telegram –Ω–µ –∑–∞–≤–∏—Å–∞–ª
    await callback.answer()

    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ callback
    # (—ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ –±—É–¥–µ—Ç —É–±–∏—Ç–∞)
    asyncio.create_task(trigger_after_test(chat_id, current_step))


async def trigger_after_test(chat_id: int, previous_step: str):
    """–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞, —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞."""
    await asyncio.sleep(10)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –¥–æ—à—ë–ª –¥–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë
    step_now = get_user_step(chat_id)
    if step_now in ("avoidance_offer", "avoidance_done"):
        await send_case_story(chat_id)


# =========================================================
# 10. –ò–°–¢–û–†–ò–Ø –ü–ê–¶–ò–ï–ù–¢–ê
# =========================================================
async def send_case_story(chat_id: int):
    text = (
        "–ù–µ–¥–∞–≤–Ω–æ —É –º–µ–Ω—è –±—ã–ª –ø–∞—Ü–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–ª—Å—è –ø–æ–±–µ–¥–∏—Ç—å –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ "
        "–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –¥–∞–≤–ª–µ–Ω–∏—è. –û–Ω –±—ã–ª —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–µ–±–µ, "
        "–∞ –Ω–∞ –¥–µ–ª–µ —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä–µ–ø–ª—è–ª —Ç—Ä–µ–≤–æ–≥—É.\n\n"
        "–ü–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤—Å—Ç—Ä–µ—á –æ–Ω –ø–æ–Ω—è–ª, —á—Ç–æ –¥–µ–ª–æ –Ω–µ –≤ —Ç–µ–ª–µ, –∞ –≤ —Ç–æ–º, "
        "–∫–∞–∫ –æ–Ω —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –æ—â—É—â–µ–Ω–∏—è.\n\n"
        "–ü–∞–Ω–∏–∫–∞ ‚Äî –Ω–µ –≤—Ä–∞–≥, –∞ –∏—Å–∫–∞–∂—ë–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –ø–æ–¥—Ä—É–∂–∏—Ç—å—Å—è."
    )
    await bot.send_message(chat_id, text)
    update_user_step(chat_id, "case_story")
    asyncio.create_task(delayed_self_disclosure(chat_id))

async def delayed_self_disclosure(chat_id: int):
    await asyncio.sleep(10)
    await send_self_disclosure(chat_id)

# =========================================================
# 11. –°–ê–ú–û–†–ê–°–ö–†–´–¢–ò–ï
# =========================================================
async def send_self_disclosure(chat_id: int):
    text = (
        "–ò–Ω–æ–≥–¥–∞ –º–Ω–µ —Å–∞–º–æ–º—É –±—ã–≤–∞–µ—Ç –ø–æ–ª–µ–∑–Ω–æ –æ–±—Å—É–¥–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏. "
        "–° –∂–∏–≤—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏, –∞ –Ω–µ —Å –∫–Ω–∏–≥–∞–º–∏ –∏–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º. "
        "–ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ç–æ, —á—Ç–æ –Ω–µ –≤–∏–¥–Ω–æ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã.\n\n"
        "–ò–º–µ–Ω–Ω–æ —Ç–∞–∫ —è —Å—Ç—Ä–æ—é –∏ —Å–≤–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Äî –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤, —Ç–æ–ª—å–∫–æ –∂–∏–≤–∞—è —Ä–∞–±–æ—Ç–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ."
    )
    await bot.send_message(chat_id, text)
    update_user_step(chat_id, "self_disclosure")
    asyncio.create_task(delayed_consultation_offer(chat_id))

async def delayed_consultation_offer(chat_id: int):
    await asyncio.sleep(10)
    await send_consultation_offer(chat_id)

# =========================================================
# 12. –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø
# =========================================================
async def send_consultation_offer(chat_id: int):
    text = (
        "–ï—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ –≥–æ—Ç–æ–≤—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≥–ª—É–±–∂–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –æ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º, "
        "—è –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π. "
        "–ú—ã –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã –ø–∞–Ω–∏–∫–∏, —É—Å—Ç—Ä–∞–Ω—è–µ–º –∏–∑–±–µ–≥–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–µ–ª–µ.\n\n"
        "üïä –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        "https://t.me/OcdAndAnxiety"
    )
    await bot.send_message(chat_id, text)
    update_user_step(chat_id, "consultation_offer")

# =========================================================
# 13. –ó–ê–ü–£–°–ö
# =========================================================
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
