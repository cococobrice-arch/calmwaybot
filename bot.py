import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ (—á—Ç–æ–±—ã journalctl –ø–æ–∫–∞–∑—ã–≤–∞–ª —Å–æ–±—ã—Ç–∏—è)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
LINK = os.getenv("LINK_TO_MATERIAL")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="get_material")]
    ])
    await message.answer(
        "–ï—Å–ª–∏ –í—ã –∑–∞—à–ª–∏ –≤ —ç—Ç–æ—Ç –±–æ—Ç, –∑–Ω–∞—á–∏—Ç, —Ç—Ä–µ–≤–æ–≥–∞ —É–∂–µ —É—Å–ø–µ–ª–∞ —Å–∏–ª—å–Ω–æ –≤–º–µ—à–∞—Ç—å—Å—è –≤ –í–∞—à—É –∂–∏–∑–Ω—å ‚Äî —Ç–æ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ, —Ç–æ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ, —Ç–æ —Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–∞—Å—Å—É–¥–æ–∫.

–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≤—Å—ë –Ω–µ —Ç–∞–∫ —Ö–∞–æ—Ç–∏—á–Ω–æ, –∫–∞–∫ –∫–∞–∂–µ—Ç—Å—è. –≠—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–º–µ—é—Ç —á—ë—Ç–∫—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å - –∏ –∫–æ–≥–¥–∞ –í—ã –ø–æ–π–º—ë—Ç–µ –µ—ë, –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å.

üìò –Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏ –∏ –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∏–º –ø–æ–¥—á–∏–Ω—è—Ç—å—Å—è.  
–°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ ‚Äî –∏ –¥–∞–π—Ç–µ –æ—Ç–ø–æ—Ä —Å—Ç—Ä–∞—Ö—É —á–µ—Ä–µ–∑ –∑–Ω–∞–Ω–∏–µ! üí°",
        reply_markup=kb
    )


# –•—ç–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"
@dp.callback_query(F.data == "get_material")
async def send_material(callback: CallbackQuery):
    await callback.message.answer(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª: {LINK or '(—Å—Å—ã–ª–∫–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)'}")

    VIDEO_NOTE_FILE_ID = os.getenv("VIDEO_NOTE_FILE_ID")
    if VIDEO_NOTE_FILE_ID:
        await bot.send_video_note(callback.from_user.id, video_note=VIDEO_NOTE_FILE_ID)
    else:
        await callback.message.answer("(–ö—Ä—É–∂–æ–∫ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî –¥–æ–±–∞–≤—å VIDEO_NOTE_FILE_ID –≤ .env)")

    await callback.message.answer("–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –Ω–∞—á–Ω–∏—Ç–µ —Å —à–∞–≥–∞ ‚Ññ1 —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º.")
    await callback.answer()


# –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id –∫—Ä—É–∂–∫–∞
@dp.message(F.video_note)
async def get_video_id(message: Message):
    await message.answer(f"file_id –∫—Ä—É–∂–∫–∞:\n{message.video_note.file_id}")


async def main():
    logger.info("ü§ñ CalmWayBot is starting polling...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.get_event_loop().run_until_complete(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped gracefully.")
