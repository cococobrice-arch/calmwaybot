import os
import asyncio
import logging
import sqlite3
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    FSInputFile
)
from aiogram.exceptions import TelegramBadRequest

# -------------------- –õ–æ–≥–∏ --------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è --------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
LINK = os.getenv("LINK_TO_MATERIAL")
VIDEO_NOTE_FILE_ID = os.getenv("VIDEO_NOTE_FILE_ID")
DB_PATH = os.getenv("DATABASE_PATH", "users.db")
CHANNEL_USERNAME = "@OcdAndAnxiety"

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# =========================================================
# 0. –ë–ê–ó–ê –î–ê–ù–ù–´–•
# =========================================================
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            source TEXT,
            step TEXT,
            subscribed INTEGER DEFAULT 0,
            last_action TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS answers (
            user_id INTEGER,
            question INTEGER,
            answer TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS events (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            timestamp TEXT,
            action TEXT,
            details TEXT
        )
    """)
    conn.commit()
    conn.close()


def update_user(user_id: int, step: str = None, subscribed: int = None):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    exists = cursor.fetchone()
    if exists:
        if step:
            cursor.execute("UPDATE users SET step=?, last_action=? WHERE user_id=?",
                           (step, datetime.now(), user_id))
        if subscribed is not None:
            cursor.execute("UPDATE users SET subscribed=?, last_action=? WHERE user_id=?",
                           (subscribed, datetime.now(), user_id))
    else:
        cursor.execute("INSERT INTO users (user_id, source, step, subscribed, last_action) VALUES (?, ?, ?, ?, ?)",
                       (user_id, "unknown", step or "start", subscribed or 0, datetime.now()))
    conn.commit()
    conn.close()


def log_event(user_id: int, action: str, details: str = None):
    """–ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É events."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO events (user_id, timestamp, action, details) VALUES (?, ?, ?, ?)",
                   (user_id, datetime.now().isoformat(timespec='seconds'), action, details))
    conn.commit()
    conn.close()


init_db()

# =========================================================
# 1. –ü–†–ò–í–ï–¢–°–¢–í–ò–ï
# =========================================================
@router.message(F.text == "/start")
async def cmd_start(message: Message):
    update_user(message.from_user.id, step="start")
    log_event(message.from_user.id, "start", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìò –ü–æ–ª—É—á–∏—Ç—å –≥–∞–π–¥", callback_data="get_material")]
    ])
    await message.answer(
        """–ï—Å–ª–∏ –í—ã –∑–∞—à–ª–∏ –≤ —ç—Ç–æ—Ç –±–æ—Ç, –∑–Ω–∞—á–∏—Ç, –í–∞—à–∏ —Ç—Ä–µ–≤–æ–≥–∏ —É–∂–µ —É—Å–ø–µ–ª–∏ —Å–∏–ª—å–Ω–æ –≤–º–µ—à–∞—Ç—å—Å—è –≤ –∂–∏–∑–Ω—å. 
–ß–∞—Å—Ç–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ üíì, –ø–æ—Ç–µ–º–Ω–µ–Ω–∏–µ –≤ –≥–ª–∞–∑–∞—Ö üåò, –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µüåÄ, –ø–æ—Ç –ø–æ —Å–ø–∏–Ω–µüò∞, —Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–∞—Å—Å—É–¥–æ–∫...
–ó–Ω–∞–∫–æ–º–æ? 

–í–µ—Ä–æ—è—Ç–Ω–æ, –í—ã —É–∂–µ –∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —Ç–∞–∫–∏–µ –Ω–∞–ø–ª—ã–≤—ã —Å—Ç—Ä–∞—Ö–∞ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è <b>–ø–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –∞—Ç–∞–∫–∞–º–∏</b>. 
–≠—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–º–µ—é—Ç —á—ë—Ç–∫—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å ‚Äî –∏ –∫–æ–≥–¥–∞ –í—ã –ø–æ–π–º—ë—Ç–µ –µ—ë, –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å.

üñä –Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –í–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏, —á–µ–º –æ–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏ –∫–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –∏–º –ø–æ–¥—á–∏–Ω—è—Ç—å—Å—è.  
–°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ ‚Äî –∏ –¥–∞–π—Ç–µ –æ—Ç–ø–æ—Ä —Å—Ç—Ä–∞—Ö—É! üí°""",
        parse_mode="HTML",
        reply_markup=kb
    )

# =========================================================
# 2. –û–¢–ü–†–ê–í–ö–ê –ì–ê–ô–î–ê
# =========================================================
@router.callback_query(F.data == "get_material")
async def send_material(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    update_user(chat_id, step="got_material")
    log_event(chat_id, "get_material", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –≥–∞–π–¥")

    if VIDEO_NOTE_FILE_ID:
        try:
            await bot.send_chat_action(chat_id, "upload_video_note")
            await bot.send_video_note(chat_id, VIDEO_NOTE_FILE_ID)
            await asyncio.sleep(2)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä—É–∂–æ–∫: {e}")

    if LINK and os.path.exists(LINK):
        file = FSInputFile(LINK, filename="–í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –∫—Ä—É–≥–∞.pdf")
        await bot.send_document(chat_id, document=file, caption="–ü–µ—Ä–≤—ã–π —à–∞–≥ —Å–¥–µ–ª–∞–Ω üí™")
    elif LINK and LINK.startswith("http"):
        await bot.send_message(chat_id, f"üìò –í–∞—à –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: {LINK}")
    else:
        await bot.send_message(chat_id, "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    asyncio.create_task(check_subscription_and_invite(chat_id))
    await callback.answer()

# =========================================================
# 3. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò –ò –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ù–ê –ö–ê–ù–ê–õ
# =========================================================
async def check_subscription_and_invite(chat_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª."""
    await asyncio.sleep(10)
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, chat_id)
        status = member.status
        is_subscribed = status in ["member", "administrator", "creator"]
        update_user(chat_id, subscribed=1 if is_subscribed else 0)
        log_event(chat_id, "subscription_checked", f"–ü–æ–¥–ø–∏—Å–∞–Ω: {is_subscribed}")
    except TelegramBadRequest:
        is_subscribed = False
        update_user(chat_id, subscribed=0)
        log_event(chat_id, "subscription_checked", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")

    if not is_subscribed:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/OcdAndAnxiety")]
            ]
        )
        text = (
            "–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª, –≥–¥–µ —è –¥–µ–ª—é—Å—å –Ω—é–∞–Ω—Å–∞–º–∏ –æ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–∏ —Ç—Ä–µ–≤–æ–≥–∏ "
            "–∏ —Ä–∞–∑–≤–µ–∏–≤–∞—é –º–∏—Ñ—ã –æ <i>–Ω–µ</i>—Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –º–µ—Ç–æ–¥–∞—Ö. "
            "–ù–∏–∫–∞–∫–æ–π –≤–æ–¥—ã ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. üíß‚ùå\n\n"
            '–ù–∞–ø—Ä–∏–º–µ—Ä, —è <a href="https://t.me/OcdAndAnxiety/16">–ø–∏—Å–∞–ª –ø–æ—Å—Ç</a> –æ —Ç–æ–º, –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–∞–Ω–∏—á–µ—Å–∫—É—é –∞—Ç–∞–∫—É.\n\n'
            "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üëáüèΩ"
        )
        await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True)
        log_event(chat_id, "channel_invite_sent", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")

    asyncio.create_task(send_after_material(chat_id))

# =========================================================
# 4. –û–ü–†–û–° –ü–û –ò–ó–ë–ï–ì–ê–ù–ò–Æ
# =========================================================
async def send_after_material(chat_id: int):
    await asyncio.sleep(10)
    await send_avoidance_intro(chat_id)

avoidance_questions = [
    "–í—ã —á–∞—Å—Ç–æ –∏–∑–º–µ—Ä—è–µ—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –ø—É–ª—å—Å?",
    "–ù–æ—Å–∏—Ç–µ —Å —Å–æ–±–æ–π –±—É—Ç—ã–ª–∫—É –≤–æ–¥—ã?",
    "–û—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–ø–æ—Ä—Ç–∞ –∏–∑-–∑–∞ –æ–ø–∞—Å–µ–Ω–∏–π?",
    "–°—Ç–∞—Ä–∞–µ—Ç–µ—Å—å –Ω–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ?",
    "–ß–∞—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ –æ–∫–Ω–æ, —á—Ç–æ–±—ã ¬´—Å—Ç–∞–ª–æ –ª–µ–≥—á–µ¬ª?",
    "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–∞–¥–∏—Ç—å—Å—è –ø–æ–±–ª–∏–∂–µ –∫ –≤—ã—Ö–æ–¥—É?",
    "–û—Ç–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å –≤ —Ç–µ–ª–µ—Ñ–æ–Ω, —á—Ç–æ–±—ã –Ω–µ –∑–∞–º–µ—á–∞—Ç—å –æ—â—É—â–µ–Ω–∏—è?",
    "–ò–∑–±–µ–≥–∞–µ—Ç–µ –ø–æ–µ–∑–¥–æ–∫ –∑–∞ –≥–æ—Ä–æ–¥ –∏–∑ —Å—Ç—Ä–∞—Ö–∞ –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ —Å–≤—è–∑–∏?"
]

@router.callback_query(F.data == "avoidance_start")
async def start_avoidance_test(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    await callback.answer()
    update_user(chat_id, step="avoidance_test")
    log_event(chat_id, "avoidance_test_started", "–ù–∞—á–∞—Ç –æ–ø—Ä–æ—Å –∏–∑–±–µ–≥–∞–Ω–∏—è")
    await bot.send_message(chat_id, "–û–ø—Ä–æ—Å: –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –í—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 8 –≤–æ–ø—Ä–æ—Å–æ–≤.")
    await send_question(chat_id, 0)

async def send_avoidance_intro(chat_id: int):
    text = (
        "–ß—Ç–æ –í—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –ø–æ—Å–ª–µ –≥–∞–π–¥–∞?\n\n"
        "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–æ –∏–∑–±–µ–≥–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞—Ö–æ–º.\n"
        "üß© –ü—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç ‚Äî –≤—Å–µ–≥–æ 8 –≤–æ–ø—Ä–æ—Å–æ–≤."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="avoidance_start")]])
    await bot.send_message(chat_id, text, reply_markup=kb)

async def send_question(chat_id: int, index: int):
    if index >= len(avoidance_questions):
        await finish_test(chat_id)
        return
    q = avoidance_questions[index]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"ans_yes_{index}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"ans_no_{index}")
        ]
    ])
    await bot.send_message(chat_id, f"{index+1}/8. {q}", reply_markup=kb)

@router.callback_query(F.data.startswith("ans_"))
async def handle_answer(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    _, ans, idx = callback.data.split("_")
    idx = int(idx)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO answers (user_id, question, answer) VALUES (?, ?, ?)", (chat_id, idx, ans))
    conn.commit()
    conn.close()
    log_event(chat_id, "avoidance_answer", f"–í–æ–ø—Ä–æ—Å {idx+1}: {ans.upper()}")
    await callback.answer()
    await send_question(chat_id, idx + 1)

async def finish_test(chat_id: int):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT answer FROM answers WHERE user_id=?", (chat_id,))
    answers = [row[0] for row in cursor.fetchall()]
    conn.close()

    yes_count = answers.count("yes")
    update_user(chat_id, step="avoidance_done")
    log_event(chat_id, "avoidance_test_finished", f"–û—Ç–≤–µ—Ç–æ–≤ '–î–ê': {yes_count}")

    if yes_count >= 4:
        text = (
            "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n"
            "–£ –í–∞—Å –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–µ –∏–∑–±–µ–≥–∞–Ω–∏–µ. –ü–æ—Ö–æ–∂–µ, –º–Ω–æ–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ö–∞, "
            "–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é. "
            "–•–æ—Ä–æ—à–∞—è –Ω–æ–≤–æ—Å—Ç—å: –∏–∑–±–µ–≥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ—Å–ª–∞–±–∏—Ç—å ‚Äî –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–º—É —è —É—á—É —Å–≤–æ–∏—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤."
        )
    else:
        text = (
            "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n\n"
            "–û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç–µ —Ç—Ä–µ–≤–æ–≥–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ —É–∂–µ –¥–µ–ª–∞–µ—Ç–µ –º–Ω–æ–≥–æ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. "
            "–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–∫—Ä–µ–ø–ª—è—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚Äî —á—Ç–æ–±—ã —Å—Ç—Ä–∞—Ö –±–æ–ª—å—à–µ –Ω–µ –¥–∏–∫—Ç–æ–≤–∞–ª –≥—Ä–∞–Ω–∏—Ü—ã –í–∞—à–µ–π –∂–∏–∑–Ω–∏."
        )

    await bot.send_message(chat_id, text)
    asyncio.create_task(send_case_story(chat_id))

# =========================================================
# 5. –ò–°–¢–û–†–ò–Ø –ü–ê–¶–ò–ï–ù–¢–ê, –ß–ê–¢, –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø
# =========================================================
async def send_case_story(chat_id: int):
    await asyncio.sleep(10)
    text = (
        "–ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: –∫–∞–∫ —Å—Ç—Ä–∞—Ö —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏–≤—ã—á–∫–æ–π.\n\n"
        "–û–¥–Ω–∞ –º–æ—è –ø–∞—Ü–∏–µ–Ω—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –∏–∑–±–µ–≥–∞–ª–∞ –ø–æ–µ–∑–¥–æ–∫ –≤ –º–µ—Ç—Ä–æ, –æ–ø–∞—Å–∞—è—Å—å, —á—Ç–æ —Å—Ç–∞–Ω–µ—Ç –ø–ª–æ—Ö–æ. "
        "–ù–æ —á–µ–º –±–æ–ª—å—à–µ –æ–Ω–∞ –∏–∑–±–µ–≥–∞–ª–∞, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –∑–∞–∫—Ä–µ–ø–ª—è–ª—Å—è —Å—Ç—Ä–∞—Ö. "
        "–ú—ã –Ω–∞—á–∞–ª–∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —ç—Ç–∏ —Å–∏—Ç—É–∞—Ü–∏–∏ ‚Äî –∏ –ø–∞–Ω–∏–∫–∞ —É—Ç—Ä–∞—Ç–∏–ª–∞ –≤–ª–∞—Å—Ç—å."
    )
    await bot.send_message(chat_id, text)
    update_user(chat_id, step="case_story")
    log_event(chat_id, "case_story_sent", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    asyncio.create_task(send_chat_invite(chat_id))

async def send_chat_invite(chat_id: int):
    await asyncio.sleep(10)
    text = (
        "–í —Ç–∞–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏—è—Ö —á–∞—Å—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º–∏, –∫—Ç–æ —É–∂–µ –∏–¥—ë—Ç –ø–æ —ç—Ç–æ–º—É –ø—É—Ç–∏. "
        "–£ –º–µ–Ω—è –µ—Å—Ç—å —á–∞—Ç, –≥–¥–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Å—É–¥–∏—Ç—å –æ–ø—ã—Ç —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏: "
        "https://t.me/Ocd_and_Anxiety_Chat"
    )
    await bot.send_message(chat_id, text)
    update_user(chat_id, step="chat_invite_sent")
    log_event(chat_id, "chat_invite_sent", "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    asyncio.create_task(send_self_disclosure(chat_id))

async def send_self_disclosure(chat_id: int):
    await asyncio.sleep(10)
    text = (
        "–ò–Ω–æ–≥–¥–∞ –∏ –º–Ω–µ –≤–∞–∂–Ω–æ –æ–±—Å—É–∂–¥–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏. "
        "–ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –¥–∞—ë—Ç –±–æ–ª—å—à–µ, —á–µ–º –∫–Ω–∏–≥–∏ –∏–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. "
        "–¢–∞–∫ —è —Å—Ç—Ä–æ—é —Å–≤–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Äî –∂–∏–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤."
    )
    await bot.send_message(chat_id, text)
    update_user(chat_id, step="self_disclosure")
    log_event(chat_id, "self_disclosure_sent", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ—Ä–∞—Å–∫—Ä—ã—Ç–∏—è")
    asyncio.create_task(send_consultation_offer(chat_id))

async def send_consultation_offer(chat_id: int):
    await asyncio.sleep(10)
    text = (
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏ –≥–ª—É–±–∂–µ ‚Äî –æ–±—Å—É–¥–∏–º –Ω–µ —Ç–æ–ª—å–∫–æ –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏, "
        "–Ω–æ –∏ —Ç–µ–º—ã —Å–Ω–∞ –∏ –æ–±—Å–µ—Å—Å–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π. "
        "üïä –Ø –ø—Ä–æ–≤–æ–∂—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –≥–¥–µ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫–æ—Ä–Ω—è–º–∏ —Å—Ç—Ä–∞—Ö–∞.\n\n"
        "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://–ª–µ—á–µ–Ω–∏–µ-–ø–∞–Ω–∏–∫–∏.—Ä—Ñ"
    )
    await bot.send_message(chat_id, text)
    update_user(chat_id, step="consultation_offer")
    log_event(chat_id, "consultation_offer_sent", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")

# =========================================================
# 6. –ó–ê–ü–£–°–ö
# =========================================================
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
